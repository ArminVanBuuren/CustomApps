//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFChat.Client.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WCFChat.Service")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CloudNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CloudName {
            get {
                return this.CloudNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CloudNameField, value) != true)) {
                    this.CloudNameField = value;
                    this.RaisePropertyChanged("CloudName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerResult", Namespace="http://schemas.datacontract.org/2004/07/WCFChat.Service")]
    public enum ServerResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUCCESS = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FAILURE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CloudNotFound = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NameIsBusy = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitConfirmation = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccessDenied = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccessGranted = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/WCFChat.Service")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFChat.Client.ServiceReference2.User SenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFChat.Client.ServiceReference2.User Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerPrivelege", Namespace="http://schemas.datacontract.org/2004/07/WCFChat.Service")]
    public enum ServerPrivelege : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Admin = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        User = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://localhost/services/chat", ConfigurationName="ServiceReference2.IChat", CallbackContract=typeof(WCFChat.Client.ServiceReference2.IChatCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/services/chat/IChat/Connect", ReplyAction="http://localhost/services/chat/IChat/ConnectResponse")]
        WCFChat.Client.ServiceReference2.ServerResult Connect(WCFChat.Client.ServiceReference2.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/services/chat/IChat/Connect", ReplyAction="http://localhost/services/chat/IChat/ConnectResponse")]
        System.Threading.Tasks.Task<WCFChat.Client.ServiceReference2.ServerResult> ConnectAsync(WCFChat.Client.ServiceReference2.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/Say")]
        void Say(WCFChat.Client.ServiceReference2.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/Say")]
        System.Threading.Tasks.Task SayAsync(WCFChat.Client.ServiceReference2.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/IsWriting")]
        void IsWriting(WCFChat.Client.ServiceReference2.User user, [System.ServiceModel.MessageParameterAttribute(Name="isWriting")] bool isWriting1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/IsWriting")]
        System.Threading.Tasks.Task IsWritingAsync(WCFChat.Client.ServiceReference2.User user, bool isWriting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://localhost/services/chat/IChat/Disconnect")]
        void Disconnect(WCFChat.Client.ServiceReference2.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://localhost/services/chat/IChat/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(WCFChat.Client.ServiceReference2.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/SetPrivilege")]
        void SetPrivilege(WCFChat.Client.ServiceReference2.User user, WCFChat.Client.ServiceReference2.ServerPrivelege privelege);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/services/chat/IChat/TransferHistory", ReplyAction="http://localhost/services/chat/IChat/TransferHistoryResponse")]
        void TransferHistory(WCFChat.Client.ServiceReference2.User[] users, WCFChat.Client.ServiceReference2.Message[] messages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/services/chat/IChat/Receive", ReplyAction="http://localhost/services/chat/IChat/ReceiveResponse")]
        void Receive(WCFChat.Client.ServiceReference2.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/IsWritingCallback")]
        void IsWritingCallback(WCFChat.Client.ServiceReference2.User client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/Terminate")]
        void Terminate();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : WCFChat.Client.ServiceReference2.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<WCFChat.Client.ServiceReference2.IChat>, WCFChat.Client.ServiceReference2.IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public WCFChat.Client.ServiceReference2.ServerResult Connect(WCFChat.Client.ServiceReference2.User user) {
            return base.Channel.Connect(user);
        }
        
        public System.Threading.Tasks.Task<WCFChat.Client.ServiceReference2.ServerResult> ConnectAsync(WCFChat.Client.ServiceReference2.User user) {
            return base.Channel.ConnectAsync(user);
        }
        
        public void Say(WCFChat.Client.ServiceReference2.Message message) {
            base.Channel.Say(message);
        }
        
        public System.Threading.Tasks.Task SayAsync(WCFChat.Client.ServiceReference2.Message message) {
            return base.Channel.SayAsync(message);
        }
        
        public void IsWriting(WCFChat.Client.ServiceReference2.User user, bool isWriting1) {
            base.Channel.IsWriting(user, isWriting1);
        }
        
        public System.Threading.Tasks.Task IsWritingAsync(WCFChat.Client.ServiceReference2.User user, bool isWriting) {
            return base.Channel.IsWritingAsync(user, isWriting);
        }
        
        public void Disconnect(WCFChat.Client.ServiceReference2.User user) {
            base.Channel.Disconnect(user);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(WCFChat.Client.ServiceReference2.User user) {
            return base.Channel.DisconnectAsync(user);
        }
    }
}
