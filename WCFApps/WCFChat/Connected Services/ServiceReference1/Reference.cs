//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFChat.Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://localhost/services/server", ConfigurationName="ServiceReference1.IMainContract", CallbackContract=typeof(WCFChat.Client.ServiceReference1.IMainContractCallback))]
    public interface IMainContract {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/CreateCloud")]
        void CreateCloud(WCFChat.Service.Cloud cloud, string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/CreateCloud")]
        System.Threading.Tasks.Task CreateCloudAsync(WCFChat.Service.Cloud cloud, string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/Unbind")]
        void Unbind(string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/Unbind")]
        System.Threading.Tasks.Task UnbindAsync(string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/GetCloud")]
        void GetCloud(WCFChat.Service.User user, string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/GetCloud")]
        System.Threading.Tasks.Task GetCloudAsync(WCFChat.Service.User user, string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/RemoveOrAccessUser")]
        void RemoveOrAccessUser(WCFChat.Service.ServerResult result, WCFChat.Service.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/RemoveOrAccessUser")]
        System.Threading.Tasks.Task RemoveOrAccessUserAsync(WCFChat.Service.ServerResult result, WCFChat.Service.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainContractCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/CreateCloudResult")]
        void CreateCloudResult(WCFChat.Service.CloudResult result, string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/RequestForAccess")]
        void RequestForAccess(WCFChat.Service.User user, string address);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/server/IMainContract/GetCloudResult")]
        void GetCloudResult(WCFChat.Service.ServerResult result, WCFChat.Service.Cloud cloud, string transactionID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainContractChannel : WCFChat.Client.ServiceReference1.IMainContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainContractClient : System.ServiceModel.DuplexClientBase<WCFChat.Client.ServiceReference1.IMainContract>, WCFChat.Client.ServiceReference1.IMainContract {
        
        public MainContractClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MainContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MainContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MainContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MainContractClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CreateCloud(WCFChat.Service.Cloud cloud, string transactionID) {
            base.Channel.CreateCloud(cloud, transactionID);
        }
        
        public System.Threading.Tasks.Task CreateCloudAsync(WCFChat.Service.Cloud cloud, string transactionID) {
            return base.Channel.CreateCloudAsync(cloud, transactionID);
        }
        
        public void Unbind(string transactionID) {
            base.Channel.Unbind(transactionID);
        }
        
        public System.Threading.Tasks.Task UnbindAsync(string transactionID) {
            return base.Channel.UnbindAsync(transactionID);
        }
        
        public void GetCloud(WCFChat.Service.User user, string transactionID) {
            base.Channel.GetCloud(user, transactionID);
        }
        
        public System.Threading.Tasks.Task GetCloudAsync(WCFChat.Service.User user, string transactionID) {
            return base.Channel.GetCloudAsync(user, transactionID);
        }
        
        public void RemoveOrAccessUser(WCFChat.Service.ServerResult result, WCFChat.Service.User user) {
            base.Channel.RemoveOrAccessUser(result, user);
        }
        
        public System.Threading.Tasks.Task RemoveOrAccessUserAsync(WCFChat.Service.ServerResult result, WCFChat.Service.User user) {
            return base.Channel.RemoveOrAccessUserAsync(result, user);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://localhost/services/chat", ConfigurationName="ServiceReference1.IChat", CallbackContract=typeof(WCFChat.Client.ServiceReference1.IChatCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/Connect")]
        void Connect(WCFChat.Service.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/Connect")]
        System.Threading.Tasks.Task ConnectAsync(WCFChat.Service.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/Say")]
        void Say(WCFChat.Service.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/Say")]
        System.Threading.Tasks.Task SayAsync(WCFChat.Service.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/IsWriting")]
        void IsWriting(WCFChat.Service.User user, [System.ServiceModel.MessageParameterAttribute(Name="isWriting")] bool isWriting1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/IsWriting")]
        System.Threading.Tasks.Task IsWritingAsync(WCFChat.Service.User user, bool isWriting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://localhost/services/chat/IChat/Disconnect")]
        void Disconnect(WCFChat.Service.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://localhost/services/chat/IChat/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(WCFChat.Service.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/ConnectResult")]
        void ConnectResult(WCFChat.Service.ServerResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/services/chat/IChat/TransferHistory", ReplyAction="http://localhost/services/chat/IChat/TransferHistoryResponse")]
        void TransferHistory(WCFChat.Service.User[] users, WCFChat.Service.Message[] messages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/services/chat/IChat/Receive", ReplyAction="http://localhost/services/chat/IChat/ReceiveResponse")]
        void Receive(WCFChat.Service.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/IsWritingCallback")]
        void IsWritingCallback(WCFChat.Service.User client, bool isWriting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/services/chat/IChat/Terminate")]
        void Terminate(WCFChat.Service.Cloud cloud);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : WCFChat.Client.ServiceReference1.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<WCFChat.Client.ServiceReference1.IChat>, WCFChat.Client.ServiceReference1.IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(WCFChat.Service.User user) {
            base.Channel.Connect(user);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(WCFChat.Service.User user) {
            return base.Channel.ConnectAsync(user);
        }
        
        public void Say(WCFChat.Service.Message message) {
            base.Channel.Say(message);
        }
        
        public System.Threading.Tasks.Task SayAsync(WCFChat.Service.Message message) {
            return base.Channel.SayAsync(message);
        }
        
        public void IsWriting(WCFChat.Service.User user, bool isWriting1) {
            base.Channel.IsWriting(user, isWriting1);
        }
        
        public System.Threading.Tasks.Task IsWritingAsync(WCFChat.Service.User user, bool isWriting) {
            return base.Channel.IsWritingAsync(user, isWriting);
        }
        
        public void Disconnect(WCFChat.Service.User user) {
            base.Channel.Disconnect(user);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(WCFChat.Service.User user) {
            return base.Channel.DisconnectAsync(user);
        }
    }
}
