//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFChat.ClientConsole.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Cloud", Namespace="http://localhost/Server/Entities/v001")]
    [System.SerializableAttribute()]
    public partial class Cloud : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://localhost/Server/Entities/v001")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CloudNameField;
        
        private string GUIDField;
        
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string CloudName {
            get {
                return this.CloudNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CloudNameField, value) != true)) {
                    this.CloudNameField = value;
                    this.RaisePropertyChanged("CloudName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GUID {
            get {
                return this.GUIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GUIDField, value) != true)) {
                    this.GUIDField = value;
                    this.RaisePropertyChanged("GUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerResult", Namespace="http://localhost/Chat/Entities/v001")]
    public enum ServerResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUCCESS = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FAILURE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CloudNotFound = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NameIsBusy = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitConfirmation = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccessDenied = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccessGranted = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        YourRequestInProgress = 64,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactBase", Namespace="http://localhost/Chat/Entities/v001")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WCFChat.ClientConsole.ServiceReference1.EdmContact))]
    public partial class ContactBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> GuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((this.GuidField.Equals(value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EdmContact", Namespace="http://localhost/Chat/Entities/v001")]
    [System.SerializableAttribute()]
    public partial class EdmContact : WCFChat.ClientConsole.ServiceReference1.ContactBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FnsIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestTestField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FnsId {
            get {
                return this.FnsIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FnsIdField, value) != true)) {
                    this.FnsIdField = value;
                    this.RaisePropertyChanged("FnsId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestTest {
            get {
                return this.TestTestField;
            }
            set {
                if ((object.ReferenceEquals(this.TestTestField, value) != true)) {
                    this.TestTestField = value;
                    this.RaisePropertyChanged("TestTest");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CloudResult", Namespace="http://localhost/Server/Entities/v001")]
    public enum CloudResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUCCESS = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FAILURE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CloudNotFound = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CloudIsBusy = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessage", Namespace="http://localhost/Chat/Entities/v001")]
    [System.SerializableAttribute()]
    public partial class ChatMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        private WCFChat.ClientConsole.ServiceReference1.User SenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public WCFChat.ClientConsole.ServiceReference1.User Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://localhost/Server/Services/v001", ConfigurationName="ServiceReference1.IMainService", CallbackContract=typeof(WCFChat.ClientConsole.ServiceReference1.IMainServiceCallback))]
    public interface IMainService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/CreateCloud")]
        void CreateCloud(WCFChat.ClientConsole.ServiceReference1.Cloud cloud, string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/CreateCloud")]
        System.Threading.Tasks.Task CreateCloudAsync(WCFChat.ClientConsole.ServiceReference1.Cloud cloud, string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/Unbind")]
        void Unbind(string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/Unbind")]
        System.Threading.Tasks.Task UnbindAsync(string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/GetCloud")]
        void GetCloud(WCFChat.ClientConsole.ServiceReference1.User user, string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/GetCloud")]
        System.Threading.Tasks.Task GetCloudAsync(WCFChat.ClientConsole.ServiceReference1.User user, string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/RemoveOrAccessUser")]
        void RemoveOrAccessUser(WCFChat.ClientConsole.ServiceReference1.ServerResult result, WCFChat.ClientConsole.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/RemoveOrAccessUser")]
        System.Threading.Tasks.Task RemoveOrAccessUserAsync(WCFChat.ClientConsole.ServiceReference1.ServerResult result, WCFChat.ClientConsole.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/Test")]
        void Test(WCFChat.ClientConsole.ServiceReference1.ContactBase baseContact);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/Test")]
        System.Threading.Tasks.Task TestAsync(WCFChat.ClientConsole.ServiceReference1.ContactBase baseContact);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/CreateCloudResult")]
        void CreateCloudResult(WCFChat.ClientConsole.ServiceReference1.CloudResult result, string transactionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/RequestForAccess")]
        void RequestForAccess(WCFChat.ClientConsole.ServiceReference1.User user, string address);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Server/Services/v001/IMainService/GetCloudResult")]
        void GetCloudResult(WCFChat.ClientConsole.ServiceReference1.ServerResult result, WCFChat.ClientConsole.ServiceReference1.Cloud cloud, string transactionID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainServiceChannel : WCFChat.ClientConsole.ServiceReference1.IMainService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainServiceClient : System.ServiceModel.DuplexClientBase<WCFChat.ClientConsole.ServiceReference1.IMainService>, WCFChat.ClientConsole.ServiceReference1.IMainService {
        
        public MainServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MainServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MainServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MainServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MainServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CreateCloud(WCFChat.ClientConsole.ServiceReference1.Cloud cloud, string transactionID) {
            base.Channel.CreateCloud(cloud, transactionID);
        }
        
        public System.Threading.Tasks.Task CreateCloudAsync(WCFChat.ClientConsole.ServiceReference1.Cloud cloud, string transactionID) {
            return base.Channel.CreateCloudAsync(cloud, transactionID);
        }
        
        public void Unbind(string transactionID) {
            base.Channel.Unbind(transactionID);
        }
        
        public System.Threading.Tasks.Task UnbindAsync(string transactionID) {
            return base.Channel.UnbindAsync(transactionID);
        }
        
        public void GetCloud(WCFChat.ClientConsole.ServiceReference1.User user, string transactionID) {
            base.Channel.GetCloud(user, transactionID);
        }
        
        public System.Threading.Tasks.Task GetCloudAsync(WCFChat.ClientConsole.ServiceReference1.User user, string transactionID) {
            return base.Channel.GetCloudAsync(user, transactionID);
        }
        
        public void RemoveOrAccessUser(WCFChat.ClientConsole.ServiceReference1.ServerResult result, WCFChat.ClientConsole.ServiceReference1.User user) {
            base.Channel.RemoveOrAccessUser(result, user);
        }
        
        public System.Threading.Tasks.Task RemoveOrAccessUserAsync(WCFChat.ClientConsole.ServiceReference1.ServerResult result, WCFChat.ClientConsole.ServiceReference1.User user) {
            return base.Channel.RemoveOrAccessUserAsync(result, user);
        }
        
        public void Test(WCFChat.ClientConsole.ServiceReference1.ContactBase baseContact) {
            base.Channel.Test(baseContact);
        }
        
        public System.Threading.Tasks.Task TestAsync(WCFChat.ClientConsole.ServiceReference1.ContactBase baseContact) {
            return base.Channel.TestAsync(baseContact);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://localhost/Chat/Services/v001", ConfigurationName="ServiceReference1.IChatService", CallbackContract=typeof(WCFChat.ClientConsole.ServiceReference1.IChatServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Chat/Services/v001/IChatService/Connect")]
        void Connect(WCFChat.ClientConsole.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Chat/Services/v001/IChatService/Connect")]
        System.Threading.Tasks.Task ConnectAsync(WCFChat.ClientConsole.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Chat/Services/v001/IChatService/Say")]
        void Say(WCFChat.ClientConsole.ServiceReference1.ChatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Chat/Services/v001/IChatService/Say")]
        System.Threading.Tasks.Task SayAsync(WCFChat.ClientConsole.ServiceReference1.ChatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Chat/Services/v001/IChatService/IsWriting")]
        void IsWriting(WCFChat.ClientConsole.ServiceReference1.User user, [System.ServiceModel.MessageParameterAttribute(Name="isWriting")] bool isWriting1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Chat/Services/v001/IChatService/IsWriting")]
        System.Threading.Tasks.Task IsWritingAsync(WCFChat.ClientConsole.ServiceReference1.User user, bool isWriting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://localhost/Chat/Services/v001/IChatService/Disconnect")]
        void Disconnect(WCFChat.ClientConsole.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://localhost/Chat/Services/v001/IChatService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(WCFChat.ClientConsole.ServiceReference1.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Chat/Services/v001/IChatService/ConnectResult")]
        void ConnectResult(WCFChat.ClientConsole.ServiceReference1.ServerResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/Chat/Services/v001/IChatService/TransferHistory", ReplyAction="http://localhost/Chat/Services/v001/IChatService/TransferHistoryResponse")]
        void TransferHistory(WCFChat.ClientConsole.ServiceReference1.User[] users, System.ServiceModel.Channels.Message[] messages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://localhost/Chat/Services/v001/IChatService/Receive", ReplyAction="http://localhost/Chat/Services/v001/IChatService/ReceiveResponse")]
        void Receive(WCFChat.ClientConsole.ServiceReference1.ChatMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Chat/Services/v001/IChatService/IsWritingCallback")]
        void IsWritingCallback(WCFChat.ClientConsole.ServiceReference1.User client, bool isWriting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://localhost/Chat/Services/v001/IChatService/Terminate")]
        void Terminate(WCFChat.ClientConsole.ServiceReference1.Cloud cloud);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : WCFChat.ClientConsole.ServiceReference1.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<WCFChat.ClientConsole.ServiceReference1.IChatService>, WCFChat.ClientConsole.ServiceReference1.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(WCFChat.ClientConsole.ServiceReference1.User user) {
            base.Channel.Connect(user);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(WCFChat.ClientConsole.ServiceReference1.User user) {
            return base.Channel.ConnectAsync(user);
        }
        
        public void Say(WCFChat.ClientConsole.ServiceReference1.ChatMessage message) {
            base.Channel.Say(message);
        }
        
        public System.Threading.Tasks.Task SayAsync(WCFChat.ClientConsole.ServiceReference1.ChatMessage message) {
            return base.Channel.SayAsync(message);
        }
        
        public void IsWriting(WCFChat.ClientConsole.ServiceReference1.User user, bool isWriting1) {
            base.Channel.IsWriting(user, isWriting1);
        }
        
        public System.Threading.Tasks.Task IsWritingAsync(WCFChat.ClientConsole.ServiceReference1.User user, bool isWriting) {
            return base.Channel.IsWritingAsync(user, isWriting);
        }
        
        public void Disconnect(WCFChat.ClientConsole.ServiceReference1.User user) {
            base.Channel.Disconnect(user);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(WCFChat.ClientConsole.ServiceReference1.User user) {
            return base.Channel.DisconnectAsync(user);
        }
    }
}
